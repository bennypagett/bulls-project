modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d", "lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
## Interactive eFGp v WinP_Tm
ggplot(df_nonTOT_clean, aes(x = eFGp, y = WinP_Tm)) +
geom_point(alpha = 0.5, colour = "dodgerblue") +
geom_smooth(method = "lm")
#strong positive relationship.
eFGp_v_WinP_Tm <- ggplot(data = df_nonTOT_clean, aes(x = eFGp, y = WinP_Tm, color = Pos, label = Tm, group = 1,
text = paste("Name:", player_name,
"<br>Team: =", Tm,
"<br>Salary: ", salary,
"<br>Trade Value: ", TrV,
"<br>Efficiency: ", EFF,
"<br>eFGp %: ", round(eFGp, digits = 4), "%",
"<br>Points/min: ", round(PTS_per_MP, digits = 4), "Pts/min",
"<br>Team Usage %:", Tm_use_total,
"<br>Total Rebounds/min:", TRB_MP))) +
labs(title = "Relationship between eFG % and Team Win %",
subtitle = "Teams have increased winning % with an increased eFG %",
caption = "compiled from data sources",
colour = "Pos") +
geom_point() +
geom_smooth(method = "lm", colour = "magenta", se = FALSE) +
geom_hline(yintercept = 50, colour = "black", linetype = "dashed") +
xlab("Effective Field Goal %") +
ylab("Team Win (%)")
ggplotly(eFGp_v_WinP_Tm, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d", "lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
## Interactive eFGp v WinP_Tm
ggplot(df_nonTOT_clean, aes(x = Age, y = WinP_Tm)) +
geom_point(alpha = 0.5, colour = "dodgerblue") +
geom_smooth(method = "lm")
## Interactive eFGp v WinP_Tm
ggplot(df_nonTOT_clean, aes(x = PTS_per_MP, y = WinP_Tm)) +
geom_point(alpha = 0.5, colour = "darkgreen") +
geom_smooth(method = "lm")
## Interactive eFF v PTS_per_MP
ggplot(df_nonTOT_clean, aes(x = EFF, y = PTS_per_MP)) +
geom_point(alpha = 0.5, colour = "dodgerblue") +
geom_smooth(method = "lm")
EFF_v_PTS_per_MP <- ggplot(data = df_nonTOT_clean, aes(x = EFF, y = PTS_per_MP, color = Pos, label = Tm, group = 1,
text = paste("Name:", player_name,
"<br>Team: =", Tm,
"<br>Salary: ", salary,
"<br>Trade Value: ", TrV,
"<br>Efficiency: ", EFF,
"<br>eFGp %: ", round(eFGp, digits = 4), "%",
"<br>Points/min: ", round(PTS_per_MP, digits = 4), "Pts/min",
"<br>Team Usage %:", Tm_use_total,
"<br>Total Rebounds/min:", TRB_MP))) +
labs(title = "Relationship between EFF and Points/min",
subtitle = "Teams have increased Points/min with an increased EFF",
caption = "compiled from data sources",
colour = "Pos") +
geom_point() +
geom_smooth(method = "lm", colour = "magenta", se = FALSE) +
xlab("Points/min") +
ylab("Efficiency Rating")
ggplotly(EFF_v_PTS_per_MP, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d", "lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
## Interactive eFGp v WinP_Tm
ggplot(df_nonTOT_clean, aes(x = TRB_MP, y = PTS_per_MP)) +
geom_point(alpha = 0.5, colour = "dodgerblue") +
geom_smooth(method = "lm")
## Salary and player finder
gg <- ggplot(data = model_testing, aes(x = salary/1000000, y = exp_PTS_per_MP, color = Pos, label = Tm, group = 1,
text = paste("Name:", player_name,
"<br>Team: =", Tm,
"<br>Salary: ", salary,
"<br>Trade Value: ", TrV,
"<br>Efficiency: ", EFF,
"<br>Expected Points: ", round(Tm_exp_Pts_per_MP, digits = 4), "Pts/min",
"<br>Team Usage %:", Tm_use_total,
"<br>Total Rebounds/min:", TRB_MP))) +
labs(title = "Player Salary vs Expected points/minute",
subtitle = "Teams have increased winning % with an increased pts/min",
caption = "Data sourced from the fNBA stats package....",
colour = "Position") +
geom_point() +
xlab("Salary (Millions)") +
ylab("Expected Points/min")
ggplotly(gg, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d",
"lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
gg3 <- ggplot(data = model_testing, aes(x = salary/1000000, y = TrV, color = Pos, label = Tm, group = 1,
text = paste("Name:", player_name,
"<br>Team: =", Tm,
"<br>Salary: ", salary,
"<br>Trade Value: ", TrV,
"<br>Efficiency: ", EFF,
"<br>Expected Points: ", round(Tm_exp_Pts_per_MP, digits = 4), "Pts/min",
"<br>Team Usage %:", Tm_use_total,
"<br>Total Rebounds/min:", TRB_MP))) +
labs(title = "Player Trade Value vs Player Salary",
subtitle = "Teams have increased winning % with an increased pts/min",
caption = "Data sourced from the fNBA stats package....",
colour = "Position") +
geom_point() +
xlab("Salary (Millions)") +
ylab("Trade Value")
ggplotly(gg, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d",
"lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
gg4 <- ggplot(data = model_testing, aes(x = salary/1000000, y = EFF, color = Pos, label = Tm, group = 1,
text = paste("Name:", player_name,
"<br>Team: =", Tm,
"<br>Salary: ", salary,
"<br>Trade Value: ", TrV,
"<br>Efficiency: ", EFF,
"<br>Expected Points: ", round(Tm_exp_Pts_per_MP, digits = 4), "Pts/min",
"<br>Team Usage %:", Tm_use_total,
"<br>Total Rebounds/min:", TRB_MP))) +
labs(title = "Player Efficiency Rating vs Player Salary",
subtitle = "Teams have increased winning % with an increased pts/min",
caption = "Data sourced from the fNBA stats package....",
colour = "Position") +
geom_point() +
xlab("Salary (Millions)") +
ylab("Expected Points/min")
ggplotly(gg, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d",
"lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
ggplot(model_testing, aes(Tm_exp_Pts_per_MP, Tm_Pts_per_MP, label = Tm, colour = Tm)) +
geom_point(alpha = 0.5) +
geom_text(nudge_x = 0.005, cex = 3) +
geom_abline(linetype = "dashed", colour = "magenta")
gg_model_testing <- ggplot(model_testing, aes(Tm_exp_Pts_per_MP, Tm_Pts_per_MP, label = Tm, color = Tm, label = Tm, group = 1,
text = paste("Team:", Tm,
"<br>Win%: ", round(WinP_Tm, digits = 4),
"<br>Actual Points: ", round(Tm_Pts_per_MP, digits = 4),"Pts/min",
"<br>Expected Points: ", round(Tm_exp_Pts_per_MP, digits = 4), "Pts/min"))) +
labs(title = "Model testing between Expected Points/min and Actual Points/min",
subtitle = "Points above the line = under estimated, below the line = over estimated",
caption = "compiled from data sources",
colour = "Tm") +
geom_point() +
geom_smooth(method = "lm", colour = "magenta", se = FALSE) +
xlab("Expected Points/min") +
ylab("Actual Points/min") +
geom_point(alpha = 0.5) +
geom_text(nudge_x = 0.005, cex = 3) +
geom_abline(linetype = "dashed", colour = "magenta")
ggplotly(gg_model_testing, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d", "lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
gg_model_testing <- ggplot(model_testing, aes(Tm_exp_Pts_per_MP, Tm_Pts_per_MP, label = Tm, color = Tm, label = Tm, group = 1,
text = paste("Team:", Tm,
"<br>Win%: ", round(WinP_Tm, digits = 4),
"<br>Actual Points: ", round(Tm_Pts_per_MP, digits = 4),"Pts/min",
"<br>Expected Points: ", round(Tm_exp_Pts_per_MP, digits = 4), "Pts/min"))) +
labs(title = "Model testing between Expected Points/min and Actual Points/min",
subtitle = "Points above the line = under estimated, below the line = over estimated",
caption = "compiled from data sources",
colour = "Tm") +
geom_point() +
xlab("Expected Points/min") +
ylab("Actual Points/min") +
geom_point(alpha = 0.5) +
geom_text(nudge_x = 0.005, cex = 3) +
geom_abline(linetype = "dashed", colour = "magenta")
ggplotly(gg_model_testing, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d", "lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
## model testing with Tm_exp_Pts_per_MP and Tm_Pts_per_MP
gg_model_testing <- ggplot(model_testing, aes(Tm_exp_Pts_per_MP, Tm_Pts_per_MP, label = Tm, color = Tm, label = Tm, group = 1,
text = paste("Team:", Tm,
"<br>Win%: ", round(WinP_Tm, digits = 4),
"<br>Actual Points: ", round(Tm_Pts_per_MP, digits = 4),"Pts/min",
"<br>Expected Points: ", round(Tm_exp_Pts_per_MP, digits = 4), "Pts/min"))) +
labs(title = "Model testing between Expected Points/min and Actual Points/min",
subtitle = "Points above the line = under estimated, below the line = over estimated",
caption = "compiled from data sources",
colour = "Tm") +
geom_point() +
xlab("Expected Points/min") +
ylab("Actual Points/min") +
geom_point(alpha = 0.5) +
geom_text(nudge_x = 0.005, cex = 3) +
geom_abline(linetype = "dashed", colour = "magenta")
ggplotly(gg_model_testing, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d", "lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
pairs(formula = ~ PTS_per_MP + eFGp + TRB_MP + Tm_use_total + EFF + TrV, data = df_nonTOT_clean)
lm_bb_hr <- lm(PTS_per_MP ~  eFGp + TRB_MP + Tm_use_total + EFF + TrV, data = df_nonTOT_clean)
tidy(lm_bb_hr, conf.int = TRUE)
lm_bb_hr <- lm(PTS_per_MP ~  eFGp + TRB_MP + Tm_use_total + EFF + TrV, data = df_nonTOT_clean)
tidy(lm_bb_hr, conf.int = TRUE)
knitr::kable(lm_bb_hr, align = ('ccccccc'))
tidy_lm_bb_hr <- tidy(lm_bb_hr, conf.int = TRUE)
knitr::kable(tidy_lm_bb_hr, align = ('ccccccc'))
lm_bb_hr <- lm(PTS_per_MP ~  eFGp + TRB_MP + Tm_use_total + EFF + TrV, data = df_nonTOT_clean)
tidy(lm_bb_hr, conf.int = TRUE)
tidy_lm_bb_hr <- tidy(lm_bb_hr, conf.int = TRUE)
knitr::kable(tidy_lm_bb_hr, align = ('ccccccc'))
lm_bb_hr <- lm(PTS_per_MP ~  eFGp + TRB_MP + Tm_use_total + EFF + TrV, data = df_nonTOT_clean)
tidy(lm_bb_hr, conf.int = TRUE)
tidy_lm_bb_hr <- tidy(lm_bb_hr, conf.int = TRUE)
lm_bb_hr <- lm(PTS_per_MP ~  eFGp + TRB_MP + Tm_use_total + EFF + TrV, data = df_nonTOT_clean)
tidy(lm_bb_hr, conf.int = TRUE)
tidy_lm_bb_hr <- tidy(lm_bb_hr, conf.int = TRUE)
knitr::kable(tidy_lm_bb_hr, align = ('ccccccc'))
DT::datatable((model_testing) %>%
select(Tm, player_name, Age, Pos, salary, PTS_per_MP, exp_PTS_per_MP, eFGp, WinP_Tm, TrV, EFF, Tm_use_total, TRB_MP) %>%
arrange(desc(exp_PTS_per_MP), salary))
DT::datatable((model_testing) %>%
select(Tm, player_name, Age, Pos, salary, G, GS, MP, PTS_per_MP, exp_PTS_per_MP, eFGp, WinP_Tm, TrV, EFF, Tm_use_total, TRB_MP, TRB) %>%
arrange(desc(exp_PTS_per_MP), salary))
ggplot(data = df_nonTOT_clean, aes(x = PTS_per_MP, y = WinP_Tm)) +
geom_point(colour = "dodgerblue") +
geom_smooth(method = "lm", colour = "magenta", se = FALSE) +
geom_hline(yintercept = 50, colour = "black", linetype = "dashed")
ggplot(data = model_testing, aes(x = Tm_Pts_per_MP, y = WinP_Tm)) +
geom_point(colour = "dodgerblue") +
geom_smooth(method = "lm", colour = "magenta", se = FALSE) +
geom_hline(yintercept = 50, colour = "black", linetype = "dashed")
### relationship between points per min and team winning percentage
WinP_v_Tm_Pts <- ggplot(data = model_testingTM_plot, aes(x = Tm_Pts_per_MP, y = WinP_Tm, color = Tm, label = Tm, group = 1,
text = paste("Team:", Tm,
"<br>Win %: =", WinP_Tm,
"<br>Points/min: ", round(Tm_Pts_per_MP, digits = 4), "Pts/min"))) +
labs(title = "Relationship between Team Win % and Team Points/min",
subtitle = "Teams have increased winning % with an increased pts/min",
caption = "compiled from data sources",
colour = "Team") +
geom_point() +
geom_smooth(method = "lm", colour = "magenta", se = FALSE) +
geom_hline(yintercept = 50, colour = "black", linetype = "dashed") +
xlab("Team Points/min") +
ylab("Team Win (%)")
ggplotly(WinP_v_Tm_Pts, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d", "lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
### relationship between points per min and team winning percentage
WinP_v_Tm_Pts <- ggplot(data = model_testingTM_plot, aes(x = Tm_Pts_per_MP, y = WinP_Tm, color = Tm, label = Tm, group = 1,
text = paste("Team:", Tm,
"<br>Win %: =", WinP_Tm,
"<br>Points/min: ", round(Tm_Pts_per_MP, digits = 4), "Pts/min"))) +
labs(title = "Relationship between Team Win % and Team Points/min",
subtitle = "Teams have increased winning % with an increased pts/min",
caption = "compiled from data sources",
colour = "Team") +
geom_point() +
geom_smooth(method = "lm", colour = "magenta", se = FALSE) +
geom_hline(yintercept = 50, colour = "black", linetype = "dashed") +
xlab("Team Points/min") +
ylab("Team Win (%)")
ggplotly(WinP_v_Tm_Pts, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d", "lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
with(df_nonTOT_clean, cor(x = PTS_per_MP, y = WinP_Tm))
corr_co_pts <- with(df_nonTOT_clean, cor(x = PTS_per_MP, y = WinP_Tm))
knitr::kable(corr_co_pts)
corr_co_pts <- with(df_nonTOT_clean, cor(x = PTS_per_MP, y = WinP_Tm))
knitr::kable(corr_co_pts, col.names = c(Correlation coefficient), align = ('c'))
corr_co_pts <- with(df_nonTOT_clean, cor(x = PTS_per_MP, y = WinP_Tm))
knitr::kable(corr_co_pts, col.names = (Correlation coefficient), align = ('c'))
corr_co_pts <- with(df_nonTOT_clean, cor(x = PTS_per_MP, y = WinP_Tm))
knitr::kable(corr_co_pts, col.names = c('Correlation coefficient'), align = ('c'))
source("funcs/Exploratory_Analysis_2.R", local = TRUE)
corr_co_pts <- with(df_nonTOT_clean, cor(x = PTS_per_MP, y = WinP_Tm))
source("funcs/Exploratory_Analysis_2.R", local = TRUE)
corr_co_pts <- with(df_nonTOT_clean, cor(x = PTS_per_MP, y = WinP_Tm))
knitr::kable(corr_co_pts, col.names = c('Correlation coefficient'), align = ('c'))
knitr::kable(corr_co_pts, col.names = c('Correlation coefficient'), align = ('c'))
source("funcs/Bulls_multi_reg.R", local = TRUE)
## model testing with Tm_exp_Pts_per_MP and Tm_Pts_per_MP
gg_model_testing <- ggplot(model_testing, aes(Tm_exp_Pts_per_MP, Tm_Pts_per_MP, label = Tm, color = Tm, label = Tm, group = 1,
text = paste("Team:", Tm,
"<br>Win%: ", round(WinP_Tm, digits = 4),
"<br>Actual Points: ", round(Tm_Pts_per_MP, digits = 4),"Pts/min",
"<br>Expected Points: ", round(Tm_exp_Pts_per_MP, digits = 4), "Pts/min"))) +
labs(title = "Model testing between Expected Points/min and Actual Points/min",
subtitle = "Points above the line = under estimated, below the line = over estimated",
caption = "compiled from data sources",
colour = "Tm") +
geom_point() +
xlab("Expected Points/min") +
ylab("Actual Points/min") +
geom_point(alpha = 0.5) +
geom_text(nudge_x = 0.005, cex = 3) +
geom_abline(linetype = "dashed", colour = "magenta")
ggplotly(gg_model_testing, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d", "lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
DT::datatable((model_testing) %>%
select(Tm, player_name, Age, Pos, salary, PTS_per_MP, exp_PTS_per_MP, eFGp, WinP_Tm, TrV, EFF, Tm_use_total, TRB_MP) %>%
arrange(desc(exp_PTS_per_MP), salary))
source("funcs/Bulls_Project_Fresh_start.R", local = TRUE)
fit <- lm(PTS_per_MP ~ eFGp + TRB_MP + Tm_use_total + EFF + TrV,
data = df_nonTOT_clean)
tidy(fit, conf.int = TRUE)
library(plotly)
gg2 <- ggplot(data = model_testing, aes(x = Tm_exp_Pts_per_MP, y = WinP_Tm, label = Tm, group = 1,
text = paste("Team: =", Tm,
"<br>Win%: ", round(WinP_Tm, digits = 4),
"<br>Actual Points: ", round(Tm_Pts_per_MP, digits = 4),"Pts/min",
"<br>Expected Points: ", round(Tm_exp_Pts_per_MP, digits = 4), "Pts/min")
)) +
geom_point(colour = "black", aes(Tm_Pts_per_MP, WinP_Tm)) +
geom_point(colour = "#1dcae0") +
geom_text(nudge_x = .00002, nudge_y = 1, cex = 3) +
labs(title = "Team Win Percentage vs Expected points/minute",
subtitle = "Teams with increased pts/min have a higher winning % ",
caption = "Data sourced from the NBA stats packages, see reference list",
colour = "Actual pts/min",
fill = "Expected pts/min") +
xlab("Pts per minute (Expected/Actual)") +
ylab("Win Percentage") +
theme_light()
ggplotly(gg2, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d",
"lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
fit <- lm(WinP_Tm ~ PTS_per_MP, data = df_nonTOT_clean)
tidy(fit,conf.int = TRUE)
summary(fit)
library(knitr)
library(rmdformats)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(readr)
library(broom)
library(performance)
library(psych)
library(ggrepel)
library(plotly)
library(DT)
library(kableExtra)
library(car)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(car)
car::durbinWatsonTest(fit)
std_res <- rstandard(fit)
points <- 1:length(std_res)
library(ggplot2)
ggplot(data = NULL, aes(x = points, y = std_res)) +
geom_point() +
ylim(c(-4,4)) +
geom_hline(yintercept = c(-3, 3), colour = "red", linetype = "dashed")
hats <- hatvalues(fit)
ggplot(data = NULL, aes(x = points, y = hats)) +
geom_point()
hat_labels <- if_else(hats >= 0.025, paste(points), "")
ggplot(data = NULL, aes(x = points, y = hats)) +
geom_point() +
geom_text(aes(label = hat_labels), nudge_y = 0.005)
cook <- cooks.distance(fit)
ggplot(data = NULL, aes(x = points, y = cook)) +
geom_point()
cook_labels <- if_else(cook >= 0.015, paste(points), "")
cook_labels <- if_else(cook >= 0.015, paste(points), "")
ggplot(data = NULL, aes(x = points, y = cook)) +
geom_point() +
geom_text(aes(label = cook_labels), nudge_x = 8, nudge_y = 0.0005)
ggplot(data = df_nonTOT_clean, aes(x = PTS_per_MP, y = WinP_Tm)) +
geom_point(colour = "dodgerblue") +
geom_smooth(method = "lm", colour = "magenta", se = FALSE) +
geom_hline(yintercept = 50, colour = "black", linetype ="dashed") +
geom_text(aes(label = cook_labels), nudge_x = 1)
outliers <- c(1, 13, 14, 25, 45, 264, 269, 275, 283, 285, 288)
df_LinR_filtered <- df_nonTOT_clean%>%
filter(!player_name %in% outliers)
fit2 <- lm(WinP_Tm ~ PTS_per_MP, data = df_LinR_filtered)
tidy(fit2, conf.int= TRUE)
summary(fit2)
ggplot(data = df_LinR_filtered, aes(x = PTS_per_MP, y = WinP_Tm)) +
geom_point(colour = "dodgerblue") +
geom_smooth(method = "lm", colour = "magenta", se = FALSE) +
geom_hline(yintercept = 50, colour = "black", linetype = "dashed")
res <- residuals(fit)
fitted <- predict(fit)
ggplot(data = NULL, aes(x = fitted, y =res)) +
geom_point(colour = "dodgerblue") +
geom_hline(yintercept = 0, colour = "red", linetype = "dashed")
ggplot(data = NULL, aes(x = res)) +
geom_histogram(colour = "black", fill = "dodgerblue", binwidth = 2)
ggplot(data = NULL, aes(sample = res)) +
stat_qq() + stat_qq_line()
## Scatter plot with PTS_per_MP and WinP_Tm with Pos colour
ggplot(data = df_nonTOT_clean, aes(x = PTS_per_MP, y = WinP_Tm, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
ggplot(data = df_nonTOT_clean) +
geom_histogram(mapping = aes(x = eFGp), colour = "black", fill = "dodgerblue")
### relationship between points per min and team winning percentage
WinP_v_Tm_Pts <- ggplot(data = model_testingTM_plot, aes(x = Tm_Pts_per_MP, y = WinP_Tm, color = Tm, label = Tm, group = 1,
text = paste("Team:", Tm,
"<br>Win %: =", WinP_Tm,
"<br>Points/min: ", round(Tm_Pts_per_MP, digits = 4), "Pts/min"))) +
labs(title = "Relationship between Team Win % and Team Points/min",
subtitle = "Teams have increased winning % with an increased pts/min",
caption = "compiled from data sources",
colour = "Team") +
geom_point() +
geom_smooth(method = "lm", colour = "magenta", se = FALSE) +
geom_hline(yintercept = 50, colour = "black", linetype = "dashed") +
xlab("Team Points/min") +
ylab("Team Win (%)")
ggplotly(WinP_v_Tm_Pts, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d", "lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
library(car)
car_durb <- car::durbinWatsonTest(fit)
knitr::kable(car_durb, align = ('cccc'))
library(car)
car_durb <- car::durbinWatsonTest(fit)
knitr::kable(car_durb, align = ('cccc'))
rm(car_durb)
library(car)
kable(car::durbinWatsonTest(fit))
library(car)
car::durbinWatsonTest(fit)
fit <- lm(WinP_Tm ~ PTS_per_MP, data = df_nonTOT_clean)
lin_model_fit <- tidy(fit,conf.int = TRUE)
kable(lin_model_fit, align = ('ccccccc'))
source("funcs/Exploratory_Analysis_2.R", local = TRUE)
fit <- lm(WinP_Tm ~ PTS_per_MP, data = df_nonTOT_clean)
lin_model_fit <- tidy(fit,conf.int = TRUE)
source("funcs/Exploratory_Analysis_2.R", local = TRUE)
fit <- lm(WinP_Tm ~ PTS_per_MP, data = df_nonTOT_clean)
lin_model_fit <- tidy(fit,conf.int = TRUE)
kable(lin_model_fit, align = ('ccccccc'))
source("funcs/Exploratory_Analysis_2.R", local = TRUE)
fit <- lm(WinP_Tm ~ PTS_per_MP, data = df_nonTOT_clean)
lin_model_fit <- tidy(fit,conf.int = TRUE)
DT::datatable((model_testing) %>%
select(Tm, player_name, Age, Pos, salary, PTS_per_MP, exp_PTS_per_MP, eFGp, WinP_Tm, TrV, EFF, Tm_use_total, TRB_MP) %>%
arrange(desc(exp_PTS_per_MP), salary))
WinP_v_Tm_Pts <- ggplot(data = model_testingTM_plot, aes(x = Tm_Pts_per_MP, y = WinP_Tm, color = Tm, label = Tm, group = 1,
text = paste("Team:", Tm,
"<br>Win %: =", WinP_Tm,
"<br>Points/min: ", round(Tm_Pts_per_MP, digits = 4), "Pts/min"))) +
labs(title = "Relationship between Team Win % and Team Points/min",
subtitle = "Teams have increased winning % with an increased pts/min",
caption = "compiled from data sources",
colour = "Team") +
geom_point() +
geom_smooth(method = "lm", colour = "magenta", se = FALSE) +
geom_hline(yintercept = 50, colour = "black", linetype = "dashed") +
xlab("Team Points/min") +
ylab("Team Win (%)")
ggplotly(WinP_v_Tm_Pts, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d", "lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
### relationship between points per min and team winning percentage
source("funcs/Bulls_multi_reg.R", local = TRUE)
WinP_v_Tm_Pts <- ggplot(data = model_testingTM_plot, aes(x = Tm_Pts_per_MP, y = WinP_Tm, color = Tm, label = Tm, group = 1,
text = paste("Team:", Tm,
"<br>Win %: =", WinP_Tm,
"<br>Points/min: ", round(Tm_Pts_per_MP, digits = 4), "Pts/min"))) +
labs(title = "Relationship between Team Win % and Team Points/min",
subtitle = "Teams have increased winning % with an increased pts/min",
caption = "compiled from data sources",
colour = "Team") +
geom_point() +
geom_smooth(method = "lm", colour = "magenta", se = FALSE) +
geom_hline(yintercept = 50, colour = "black", linetype = "dashed") +
xlab("Team Points/min") +
ylab("Team Win (%)")
ggplotly(WinP_v_Tm_Pts, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d", "lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
### relationship between points per min and team winning percentage
source("funcs/Bulls_multi_reg.R", local = TRUE)
WinP_v_Tm_Pts <- ggplot(data = model_testingTM_plot, aes(x = Tm_Pts_per_MP, y = WinP_Tm, color = Tm, label = Tm, group = 1,
text = paste("Team:", Tm,
"<br>Win %: =", WinP_Tm,
"<br>Points/min: ", round(Tm_Pts_per_MP, digits = 4), "Pts/min"))) +
labs(title = "Relationship between Team Win % and Team Points/min",
subtitle = "Teams have increased winning % with an increased pts/min",
caption = "compiled from data sources",
colour = "Team") +
geom_point() +
geom_smooth(method = "lm", colour = "magenta", se = FALSE) +
geom_hline(yintercept = 50, colour = "black", linetype = "dashed") +
xlab("Team Points/min") +
ylab("Team Win (%)")
ggplotly(WinP_v_Tm_Pts, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d", "lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
