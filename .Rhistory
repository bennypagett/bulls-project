## eFGp vs WinP_Tm with Pos
ggplot(data = df_nonTOT_clean, aes(x = Tm_use_total, y = WinP_Tm, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
## Teams that may be utilising SG more, may have more TOV and FTA/FGA/eFGp as they aren't converting attempts to PTS.
## Age vs Tm_use_total with Pos
ggplot(data = df_nonTOT_clean, aes(x = Age, y = Tm_use_total, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
## EFF vs W with Pos
ggplot(data = df_nonTOT_clean, aes(x = EFF, y = W, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
## TrV vs W with Pos
ggplot(data = df_nonTOT_clean, aes(x = TrV, y = W, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
## eFG vs EFF with Pos
ggplot(data = df_nonTOT_clean, aes(x = EFF, y = eFGp, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
## TRB vs W with Pos
ggplot(data = df_nonTOT_clean, aes(x = TRB, y = W, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
## TRB_MP vs W with Pos
ggplot(data = df_nonTOT_clean, aes(x = TRB_MP, y = W, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
## Age vs W with Pos
ggplot(data = df_nonTOT_clean, aes(x = Age, y = W, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
## Win_PT_MP vs PTS_per_game
ggplot(data = df_nonTOT_clean, aes(x = PTS_per_game, y = WinP_Tm, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
##
## Variables that show slight significance to increased Wins : TM_use_total, EFF, PTS_per_MP (possible leverage point with game)
## Variables that show increase in TrV: PTS_per_MP,
## Increased PTS_per_MP shows positive trend/increase eFGp
## Increased Age ~up to 30 shows increased trend of EFF, slight decrease trend in Tm_use_total with increasing Age
## Variables of Position to analyse. SG increase in PTS_per_MP decreased count of W? and Increased Tm_use_total showed decreased W in SG
## Slight down trend with PF. Positive relationship with PG and SF. So SF and PG with high PTS_per_MP
## Typically showing a trend for increase Tm_use with increasing Age in SG, however shows decrease in W for team
## Downward trend of PF and C with Age for Tm_use - typically these positions are a little bit younger due to physical nature
# SF and PG strong relationship of increased W with increase age ~ 30+ish, min to moderate increase with C&PF, decrease wins with Age in SG
## Increased EFF causes increase in W in all except SG. PG and SF are the highest slope angle
## Increased eFGp shows increased relationship with EFF across all positions.
## Increased TRB shows increased W in PG, SF (strong) and slight-moderate in C and PF. With a negative relationship in SG.
# Increased PTS_per_MP shows greater W. Showing in some positions a strong strength relationship.
##Could use correlation coefficient to find figure
lm_bb <- lm(WinP_Tm ~ EFF, data = df_nonTOT_clean)
tidy(lm_bb, conf.int = TRUE)
##lm_bb <- lm(WinP_Tm ~ PTS_per_MP, data = df_nonTOT_clean)
##tidy(lm_bb, conf.int = TRUE)
# shows that teams with 0 walks will be able to get 2.17 runs from other means
## team will increase W by 1 PTS_per_MP, we would see 39 W per season increase. with a 95% CI of between 35.1 and 42.81.
## counfounding variables - Positions with large volume of shooting may miss more in the process,
# so their eFGp may not directly imply a win
## Other factors of game play - requires 5 players to work together to get PTS.Good SG in a bad team, will show possible poor trend of stats/Wins
ggplot(df_nonTOT_clean, aes(x = eFGp, y = PTS_per_MP)) +
geom_point(alhpa = 0.5, colour = "darkgreen") +
geom_smooth(method = "lm")
# shows moderate relationship of eFGp and PTS_per_MP
ggplot(df_nonTOT_clean, aes(x = eFGp, y = WinP_Tm)) +
geom_point(alpha = 0.5, colour = "dodgerblue") +
geom_smooth(method = "lm")
#strong positive relationship.
ggplot(df_nonTOT_clean, aes(x = Age, y = WinP_Tm)) +
geom_point(alpha = 0.5, colour = "dodgerblue") +
geom_smooth(method = "lm")
## Pairs plot for visualizing relationship between > 2 variables
pairs(formula = ~ WinP_Tm + PTS_per_MP + eFGp + TRB + Tm_use_total + EFF + TrV, data = df_nonTOT_clean)
## HOw many more W when controlling for other factors
lm_bb_hr <- lm(WinP_Tm ~ PTS_per_MP + eFGp + TRB + Tm_use_total + EFF + TrV, data = df_nonTOT_clean)
tidy(lm_bb_hr, conf.int = TRUE)
## change
# CI = 22.9 - 74.3
# Y-intercept = 48.6, eFGp = 48.0 and TRB = -0.0103 Tm_use_total -6.98 PTS_per_MP -8.67
# EFF = 0.0151 TrV = -0.0378  Age = -0.496
## for every 1 increase of eFGp, W will increase by 39.4
fit <- lm(WinP_Tm ~ PTS_per_MP + eFGp + TRB + Tm_use_total + EFF + TrV,
data = df_nonTOT_clean)
tidy(fit, conf.int = TRUE)
### Predicted value formula important to remember
#term          estimate std.error statistic      p.value  conf.low conf.high
#<chr>            <dbl>     <dbl>     <dbl>        <dbl>     <dbl>     <dbl>
#  1 (Intercept)   38.4       7.01         5.47 0.0000000795  24.6      52.1
#2 eFGp          37.1      11.6          3.21 0.00145       14.4      59.9
#3 TRB           -0.00873   0.00787     -1.11 0.268         -0.0242    0.00674
#4 Tm_use_total -19.9      18.3         -1.09 0.278        -55.8      16.1
#5 EFF            0.0108    0.00336      3.21 0.00142        0.00419   0.0174
#6 TrV           -0.0251    0.00577     -4.36 0.0000170     -0.0365   -0.0138
# as such if
#eFG = 0.55
#TRB = 200
#Tm_use_total = 0.2
#PTS_per_MP = 0.5
#EFF = 1500
#TrV = 600
#Predictive formula to PTS_per_MP
38.4 + 37.1 * 0.55 + -0.00873 * 200 + -19.9  * 0.20 + 0.0108 * 1500 + -0.0251 * 600
##[1] 54.219
35.8 + -7.44 * 0.5 + 41.9 * 0.55 + -0.00897 * 200 + -3.11  * 0.20 + 0.0110 * 1500 + -0.0252 * 600
35.8 + -7.44 * 0.5 + 41.9 * 0.55 + -0.00897 * 200 + -3.11  * 0.20 + 0.0110 * 1500 + -0.0252 * 600
View(model_testing)
car::avPlots(fit)
car::vif(fit)
sqrt(car::vif(fit))
View(model_testing)
model_testing_W <- df_nonTOT_clean[c(1:18,33)]
model_testing_W <- mutate(model_testing_W, exp_WinP_Tm = predict(fit, newdata = model_testing_W))
view(model_testing_W)
model_testing_W <- model_testing_W %>%
relocate(exp_WinP_Tm, .after = WinP_Tm)
View(model_testing_W)
ggplot(model_testing_W, aes(exp_WinP_Tm, WinP_Tm, label = Tm)) +
geom_point(colour = "dodgerblue") +
geom_text(nudge_x = 0.1, cex = 3) +
geom_abline(linetype = "dashed", colour = "magenta")
ggplot(model_testing_W, aes(exp_WinP_Tm, WinP_Tm, label = player_id)) +
geom_point(colour = "dodgerblue") +
geom_text(nudge_x = 0.1, cex = 3) +
geom_abline(linetype = "dashed", colour = "magenta")
## Chicago Bulls - Multiple linear regressions
## Using df_nonTOT_clean looking at PTS_per_MP
library(tidyverse)
library(ggplot2)
library(readr)
library(dplyr)
library(broom)
library(performance)
library(psych)
library(ggrepel)
##Read in data
df_nonTOT_clean <- read_csv("data/tidy_data/df_nonTOT_clean.csv")
view(df_nonTOT_clean)
## relocate PTS_per_MP and PTS_per_game
df_nonTOT_clean <- df_nonTOT_clean %>%
relocate(PTS_per_MP, .after = eFGp)
df_nonTOT_clean <- df_nonTOT_clean %>%
relocate(PTS_per_game, .after = PTS_per_MP)
df_nonTOT_clean <- df_nonTOT_clean %>%
mutate(WinP_Tm = ((W / Tm_G) * 100))
df_nonTOT_clean <- df_nonTOT_clean %>%
relocate(WinP_Tm, .after = L)
## create new df "datC" and create variables/game
datC <- df_nonTOT_clean %>% filter(df_nonTOT_clean$Pos == "C")
## create new df "datPF"
datPF <- df_nonTOT_clean %>% filter(df_nonTOT_clean$Pos == "PF")
## create new df "datPG"
datPG <- df_nonTOT_clean %>% filter(df_nonTOT_clean$Pos == "PG")
## create new df "datSF"
datSF <- df_nonTOT_clean %>% filter(df_nonTOT_clean$Pos == "SF")
## create new df "datSG"
datSG <- df_nonTOT_clean %>% filter(df_nonTOT_clean$Pos == "SG")
## Write_csv data file for each Pos
write_csv(datC, file = "data/tidy_data/datC.csv")
write_csv(datPF, file = "data/tidy_data/datPF.csv")
write_csv(datPG, file = "data/tidy_data/datPG.csv")
write_csv(datSF, file = "data/tidy_data/datSF.csv")
write_csv(datSG, file = "data/tidy_data/datSG.csv")
summary(df_nonTOT_clean$Pos)
head(df_nonTOT_clean, 20)
df_nonTOT_clean <- df_nonTOT_clean %>%
filter(df_nonTOT_clean$G >= 10)
## Change Pos to factor (C = 1, PF = 2, PG = 3, SF = 4, SG = 5)
df_nonTOT_clean$Pos <- as.factor(df_nonTOT_clean$Pos)
str(df_nonTOT_clean$Pos)
table(df_nonTOT_clean$Pos)
levels(df_nonTOT_clean$Pos)
## eFG and Team Wins
ggplot(df_nonTOT_clean, aes(x = eFGp, y = WinP_Tm)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm")
## PTS_per_MP vs WinP_TM
ggplot(df_nonTOT_clean, aes(x = PTS_per_MP, y = WinP_Tm)) +
geom_point(alpha = 0.5, colour = "magenta") +
geom_smooth(method = "lm")
### eFG% vs PTS_per_MP
ggplot(df_nonTOT_clean, aes(x = PTS_per_MP, y = eFGp)) +
geom_point(alpha = 0.5, colour = "magenta") +
geom_smooth(method = "lm")
### TrV vs PTS_per_MP
ggplot(df_nonTOT_clean, aes(x = PTS_per_MP, y = TrV)) +
geom_point(alpha = 0.5, colour = "dodgerblue") +
geom_smooth(method = "lm")
### eFF vs W
ggplot(df_nonTOT_clean, aes(x = EFF, y = WinP_Tm)) +
geom_point(alpha = 0.5, colour = "magenta") +
geom_smooth(method = "lm")
### Tm_use_total vs WinP_Tm
ggplot(df_nonTOT_clean, aes(x = Tm_use_total, y = WinP_Tm)) +
geom_point(alpha = 0.5, colour = "magenta") +
geom_smooth(method = "lm")
## PTS_per_game vs WinP_Tm
ggplot(df_nonTOT_clean, aes(x = PTS_per_game, y = WinP_Tm)) +
geom_point(alpha = 0.5, colour = "green") +
geom_smooth(method = "lm")
## PTS_per_MP vs WinP_Tm
ggplot(df_nonTOT_clean, aes(x = PTS_per_MP, y = WinP_Tm)) +
geom_point(alpha = 0.5, colour = "green") +
geom_smooth(method = "lm")
### STL_MP vs WinP_Tm
ggplot(df_nonTOT_clean, aes(x = STL_MP, y = WinP_Tm)) +
geom_point(alpha = 0.5, colour = "red") +
geom_smooth(method = "lm")
### TOV_MP vs WinP_Tm
ggplot(df_nonTOT_clean, aes(x = TOV_MP, y = WinP_Tm)) +
geom_point(alpha = 0.5, colour = "magenta") +
geom_smooth(method = "lm")
## Age vs EFF
ggplot(df_nonTOT_clean, aes(x = Age, y = EFF)) +
geom_point(alpha = 0.5, colour = "magenta") +
geom_smooth(method = "lm")
## Age vs eFGp
ggplot(df_nonTOT_clean, aes(x = Age, y = eFGp)) +
geom_point(alpha = 0.5, colour = "magenta") +
geom_smooth(method = "lm")
## Age vs Tm_use_total
ggplot(df_nonTOT_clean, aes(x = Age, y = Tm_use_total)) +
geom_point(alpha = 0.5, colour = "magenta") +
geom_smooth(method = "lm")
##Box plot of position vs PTS_per_MP
ggplot(data = df_nonTOT_clean, aes(x = Pos, y = PTS_per_MP)) +
geom_boxplot(aes(fill = Pos)) +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
## with assesment including Pos
## Scatter plot with PTS_per_MP and WinP_Tm with Pos colour
ggplot(data = df_nonTOT_clean, aes(x = PTS_per_MP, y = WinP_Tm, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
## eFGp vs WinP_Tm with Pos
ggplot(data = df_nonTOT_clean, aes(x = eFGp, y = WinP_Tm, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
##### simple linear regression eFGp and WinP_Tm shows strong-moderate increase in WinP_Tm
## eFGp vs WinP_Tm with Pos
ggplot(data = df_nonTOT_clean, aes(x = Age, y = WinP_Tm, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
## eFGp vs WinP_Tm with Pos
ggplot(data = df_nonTOT_clean, aes(x = Tm_use_total, y = WinP_Tm, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
## Teams that may be utilising SG more, may have more TOV and FTA/FGA/eFGp as they aren't converting attempts to PTS.
## Age vs Tm_use_total with Pos
ggplot(data = df_nonTOT_clean, aes(x = Age, y = Tm_use_total, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
## EFF vs W with Pos
ggplot(data = df_nonTOT_clean, aes(x = EFF, y = W, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
## TrV vs W with Pos
ggplot(data = df_nonTOT_clean, aes(x = TrV, y = W, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
## eFG vs EFF with Pos
ggplot(data = df_nonTOT_clean, aes(x = EFF, y = eFGp, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
## TRB vs W with Pos
ggplot(data = df_nonTOT_clean, aes(x = TRB, y = W, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
## TRB_MP vs W with Pos
ggplot(data = df_nonTOT_clean, aes(x = TRB_MP, y = W, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
## Age vs W with Pos
ggplot(data = df_nonTOT_clean, aes(x = Age, y = W, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
## Win_PT_MP vs PTS_per_game
ggplot(data = df_nonTOT_clean, aes(x = PTS_per_game, y = WinP_Tm, colour = Pos)) +
geom_point() +
geom_smooth(method = "lm") +
scale_fill_discrete(name = "Pos", labels = c("1 = C", "2 = PF", "3 = PG","4 = SF", "5 = SG"))
##
## Variables that show slight significance to increased Wins : TM_use_total, EFF, PTS_per_MP (possible leverage point with game)
## Variables that show increase in TrV: PTS_per_MP,
## Increased PTS_per_MP shows positive trend/increase eFGp
## Increased Age ~up to 30 shows increased trend of EFF, slight decrease trend in Tm_use_total with increasing Age
## Variables of Position to analyse. SG increase in PTS_per_MP decreased count of W? and Increased Tm_use_total showed decreased W in SG
## Slight down trend with PF. Positive relationship with PG and SF. So SF and PG with high PTS_per_MP
## Typically showing a trend for increase Tm_use with increasing Age in SG, however shows decrease in W for team
## Downward trend of PF and C with Age for Tm_use - typically these positions are a little bit younger due to physical nature
# SF and PG strong relationship of increased W with increase age ~ 30+ish, min to moderate increase with C&PF, decrease wins with Age in SG
## Increased EFF causes increase in W in all except SG. PG and SF are the highest slope angle
## Increased eFGp shows increased relationship with EFF across all positions.
## Increased TRB shows increased W in PG, SF (strong) and slight-moderate in C and PF. With a negative relationship in SG.
# Increased PTS_per_MP shows greater W. Showing in some positions a strong strength relationship.
##Could use correlation coefficient to find figure
lm_bb <- lm(PTS_per_MP ~ EFF, data = df_nonTOT_clean)
tidy(lm_bb, conf.int = TRUE)
##lm_bb <- lm(WinP_Tm ~ PTS_per_MP, data = df_nonTOT_clean)
##tidy(lm_bb, conf.int = TRUE)
# shows that teams with 0 walks will be able to get 2.17 runs from other means
## team will increase W by 1 PTS_per_MP, we would see 39 W per season increase. with a 95% CI of between 35.1 and 42.81.
## counfounding variables - Positions with large volume of shooting may miss more in the process,
# so their eFGp may not directly imply a win
## Other factors of game play - requires 5 players to work together to get PTS.Good SG in a bad team, will show possible poor trend of stats/Wins
ggplot(df_nonTOT_clean, aes(x = eFGp, y = PTS_per_MP)) +
geom_point(alhpa = 0.5, colour = "darkgreen") +
geom_smooth(method = "lm")
# shows moderate relationship of eFGp and PTS_per_MP
ggplot(df_nonTOT_clean, aes(x = eFGp, y = WinP_Tm)) +
geom_point(alpha = 0.5, colour = "dodgerblue") +
geom_smooth(method = "lm")
#strong positive relationship.
ggplot(df_nonTOT_clean, aes(x = Age, y = WinP_Tm)) +
geom_point(alpha = 0.5, colour = "dodgerblue") +
geom_smooth(method = "lm")
## Pairs plot for visualizing relationship between > 2 variables
pairs(formula = ~ PTS_per_MP + eFGp + TRB + Tm_use_total + EFF + TrV, data = df_nonTOT_clean)
## HOw many more W when controlling for other factors
lm_bb_hr <- lm(PTS_per_MP ~  eFGp + TRB + Tm_use_total + EFF + TrV, data = df_nonTOT_clean)
tidy(lm_bb_hr, conf.int = TRUE)
# CI = 22.9 - 74.3
# Y-intercept = 48.6, eFGp = 48.0 and TRB = -0.0103 Tm_use_total -6.98 PTS_per_MP -8.67
# EFF = 0.0151 TrV = -0.0378  Age = -0.496
## for every 1 increase of eFGp, W will increase by 39.4
fit <- lm(PTS_per_MP ~ eFGp + TRB + Tm_use_total + EFF + TrV,
data = df_nonTOT_clean)
tidy(fit, conf.int = TRUE)
### Predicted value formula important to remember
#term         estimate std.error statistic   p.value   conf.low conf.high
#<chr>           <dbl>     <dbl>     <dbl>     <dbl>      <dbl>     <dbl>
#  1 (Intercept)  35.8      11.6        3.10   0.00207     13.1      58.5
#2 eFGp         41.9      20.9        2.01   0.0451       0.911    82.9
#3 TRB          -0.00897   0.00792   -1.13   0.258       -0.0245    0.00661
#4 Tm_use_total -3.11     63.3       -0.0491 0.961     -128.      121.
#5 PTS_per_MP   -7.44     26.9       -0.276  0.783      -60.4      45.5
#6 EFF           0.0110    0.00344    3.20   0.00150      0.00423   0.0177
#7 TrV          -0.0252    0.00578   -4.36   0.0000168   -0.0366   -0.0138
# as such if
#eFG = 0.55
#TRB = 200
#Tm_use_total = 0.2
#PTS_per_MP = 0.5
#EFF = 1500
#TrV = 600
#Predictive formula to PTS_per_MP
-0.341 + .644 * 0.55 + -0.0000320 * 200 + 2.25 * 0.20 + 0.0000269 * 1500 + -0.00000779 * 600
##[1] 0.492476
## can use head(predict(fit)) to give summary of top 6 using prediction formula without specifically saying which values to use.
### avPlot used to assess R_per_game against all other variables.
car::avPlots(fit)
### multicollinearity can be done by hand using a pairs plot. We want some relationship,
# however not a direct linear relationship
#VIF - variance inflation factor.
car::vif(fit)
# next step - need to square root output to find actual variance
sqrt(car::vif(fit))
# looking aware for values close to 5 for VIF as would imply high multicolinearity
#car::vif(fit)
# eFGp          TRB Tm_use_total   PTS_per_MP          EFF          TrV
# 4.174503     5.252648    23.137977    27.091073     8.872103     2.820292
#> sqrt(car::vif(fit))
# eFGp          TRB Tm_use_total   PTS_per_MP          EFF          TrV
# 2.043160     2.291866     4.810195     5.204909     2.978608     1.679372
## PTS_per_MP
##  eFGp          TRB Tm_use_total          EFF          TrV
##  1.289536     5.190449     1.935887     8.477168     2.816573
##  > sqrt(car::vif(fit))
##  eFGp          TRB Tm_use_total          EFF          TrV
##  1.135577     2.278256     1.391361     2.911558     1.678265
## can use model to then fit into model.
model_testing <- df_nonTOT_clean[c(1:18,33)]
summary(PGmodel_testing)
### New df creation
model_testing <- mutate(model_testing, exp_PTS_per_MP = predict(fit, newdata = model_testing))
view(model_testing)
model_testing <- model_testing %>%
relocate(exp_PTS_per_MP, .after = WinP_Tm)
## model testing
ggplot(model_testing, aes(exp_PTS_per_MP, PTS_per_MP, label = Tm)) +
geom_point(colour = "dodgerblue") +
geom_text(nudge_x = 0.1, cex = 3) +
geom_abline(linetype = "dashed", colour = "magenta")
## dashed line is if everything was predicted correctly, would line up on line
# points above the line - under estimated, below the line = over estimated
# Looking at correlation of Wins to exp_R_game
ggplot(new_dat, aes(x = W, y = exp_R_per_game, label = teamID)) +
geom_point(colour = "dodgerblue") +
geom_text(nudge_x = 2, cex = 3)
## creating player metric, player specific (some confounding issues to player details, need to normalise to the opportunities a player gets)
pa_per_game <- Batting %>%
filter(yearID == 2016) %>%
group_by(teamID) %>%
summarise(pa_per_game = sum(AB + BB + HBP + SF + SH)/max(G)) %>%
pull(pa_per_game) %>%
mean
pa_per_game
### also to include other player
players <- Batting %>% filter(between(yearID, 2011, 2015)) %>%
group_by(playerID) %>%
mutate(PA = AB + BB + HBP + SF + SH)
head(players, 10)
## now for plate appearances rate
players <- players %>%
summarise(G = sum(PA) / pa_per_game,
BB_per_game = sum(BB) / G,
S_per_game = sum(H-X2B-X3B-HR) / G,
D_per_game = sum(X2B) / G,
T_per_game = sum(X3B) / G,
HR_per_game = sum(HR) / G,
BA_per_game = sum(H) / sum(AB),
PA = sum(PA)) %>%
filter(PA >= 200) %>%
select(-G)
players
## Expected runs player metric
players <- mutate(players, exp_Runs = predict(fit, newdata = players))
players %>%
ggplot(aes(x = exp_Runs)) +
geom_histogram(binwidth = 0.5, colour = "black", fill = "dodgerblue")
## adding salary and position
players <- Salaries %>%
filter(yearID == 2016) %>%
select(playerID, salary) %>%
right_join(players, by = "playerID")
view(players)
## now to assess data frame
players %>%
select(nameFirst, nameLast, POS, salary, exp_Runs) %>%
arrange(desc(exp_Runs), salary) %>%
top_n(10)
## scatter plot
players %>% ggplot(aes(x = salary/1000000, y = exp_Runs, color = POS)) +
geom_point() +
xlab("Salary (Millions)")
ggplot(model_testing, aes(exp_PTS_per_MP, PTS_per_MP, label = Pos)) +
geom_point(colour = "Tm") +
geom_text(nudge_x = 0.1, cex = 3) +
geom_abline(linetype = "dashed", colour = "magenta")
ggplot(model_testing, aes(exp_PTS_per_MP, PTS_per_MP, label = Pos)) +
geom_point(colour = Tm) +
geom_text(nudge_x = 0.1, cex = 3) +
geom_abline(linetype = "dashed", colour = "magenta")
ggplot(model_testing, aes(exp_PTS_per_MP, PTS_per_MP, label = Pos, colour = Tm)) +
geom_point() +
geom_text(nudge_x = 0.1, cex = 3) +
geom_abline(linetype = "dashed", colour = "magenta")
ggplot(model_testing, aes(exp_PTS_per_MP, PTS_per_MP, label = Tm, colour = Pos)) +
geom_point(alpha = 0.5) +
geom_text(nudge_x = 0.1, cex = 3) +
geom_abline(linetype = "dashed", colour = "magenta")
ggplot(model_testing, aes(x = WinP_Tm, y = exp_PTS_per_MP, label = teamID)) +
geom_point(colour = "dodgerblue") +
geom_text(nudge_x = 2, cex = 3)
ggplot(model_testing, aes(x = WinP_Tm, y = exp_PTS_per_MP, label = Tm)) +
geom_point(colour = "dodgerblue") +
geom_text(nudge_x = 2, cex = 3)
ggplot(model_testing, aes(x = W, y = exp_PTS_per_MP, label = Tm)) +
geom_point(colour = "dodgerblue") +
geom_text(nudge_x = 2, cex = 3)
View(model_testing)
model_testing %>%
select(player_name, Tm, Age, POS, salary, TrV, EFF, Tm_use_total,PTS_per_MP, TRB) %>%
arrange(desc(exp_PTS_per_MP), salary) %>%
top_n(10)
model_testing %>%
select(player_name, Tm, Age, Pos, salary, TrV, EFF, Tm_use_total,PTS_per_MP, TRB) %>%
arrange(desc(exp_PTS_per_MP), salary) %>%
top_n(10)
model_testing %>%
select(player_name, Tm, Age, Pos, salary, TrV, EFF, Tm_use_total,PTS_per_MP, TRB, exp_PTS_per_MP) %>%
arrange(desc(exp_PTS_per_MP), salary) %>%
top_n(10)
model_testing %>%
select(player_name, Tm, Age, Pos, salary, TrV, EFF, Tm_use_total,PTS_per_MP, TRB, exp_PTS_per_MP) %>%
arrange(desc(exp_PTS_per_MP), salary) %>%
top_n(30)
model_testing %>%
select(player_name, Tm, Age, Pos, salary, TrV, EFF, Tm_use_total,PTS_per_MP, TRB, exp_PTS_per_MP) %>%
arrange(desc(exp_PTS_per_MP), salary) %>%
top_n(20)
model_testing %>% ggplot(aes(x = salary/1000000, y = exp_PTS_per_MP, color = POS)) +
geom_point() +
xlab("Salary (Millions)")
model_testing %>% ggplot(aes(x = salary/1000000, y = exp_PTS_per_MP, color = Pos)) +
geom_point() +
xlab("Salary (Millions)")
model_testing %>% ggplot(aes(x = salary/1000000, y = TrV, color = Pos)) +
geom_point() +
xlab("Salary (Millions)")
model_testing %>% ggplot(aes(x = salary/1000000, y = EFF, color = Pos)) +
geom_point() +
xlab("Salary (Millions)")
