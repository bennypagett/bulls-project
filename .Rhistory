knitr::include_graphics(rep("images/chicago-bulls-logo-nba.jpg"))
knitr::include_graphics(rep("images/Chicago_Logo.png"))
knitr::include_graphics(rep("images/png-clipart-chicago-bulls.png"))
knitr::include_graphics(rep("images/png-clipart-chicago-bulls.png"))
knitr::include_graphics(rep("images/Chicago_Logo.png"))
knitr::include_graphics(rep("images/chicago-bulls-logo-nba.jpg"))
knitr::include_graphics(rep("images/chicago-bulls-logo-vector.png"))
knitr::include_graphics(rep("images/Chicago_Bulls_logo5.png"))
knitr::include_graphics(rep("images/Chicago_Bulls_logo6.png"))
knitr::include_graphics(rep("images/Chicago_logo_BW.jpeg"))
knitr::include_graphics(rep("images/Chicago_bulls_logo7G.jpeg"))
knitr::include_graphics(rep("images/Chicago_bulls_logo6.png"))
knitr::include_graphics(rep("images/Chicago_bulls_logo7G.jpeg"))
knitr::include_graphics(rep("images/CodeCogsEqn_TRB.gif"))
knitr::include_graphics(rep("images/Chicago_bulls_logo7G.jpeg"))
knitr::include_graphics(rep("images/png-clipart-chicago-bulls.png"))
install.packages("rmdformats")
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
echo = TRUE)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(readr)
library(broom)
library(performance)
library(psych)
library(ggrepel)
library(rmdformats)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
echo = TRUE)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(readr)
library(broom)
library(performance)
library(psych)
library(ggrepel)
library(rmdformats)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(readr)
library(broom)
library(performance)
library(psych)
library(ggrepel)
library(rmdformats)
## NBA 18-19 Player stats and salaries
player_stats_tidy <- readr::read_csv("data/tidy_data/player_stats_tidy.csv")
library(knitr)
library(rmdformats)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(readr)
library(broom)
library(performance)
library(psych)
library(ggrepel)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
source("Bulls_multi_reg.R", local = knitr::knit_global(bulls-project.Rproj))
source("Bulls_multi_reg.R", local = knitr::knit_global())
source("Bulls_multi.R", local = knitr::knit_global(~Bulls-project/Chicago_Bulls_u125511/funcs))
source("Bulls_multi.R", local = knitr::knit_global(~Bulls-project/Chicago_Bulls_u125511/funcs))
source("Bulls_multi.R", local = knitr::knit_global(~Bulls-project/Chicago_Bulls_u125511/funcs))
source("Bulls_multi.R", local = knitr::knit_global(~Bulls-project/Chicago_Bulls_u125511/funcs))
sys.source("Bulls_multi.R", envir = knitr::knit_global(~Bulls-project/Chicago_Bulls_u125511/funcs))
sys.source("Bulls_multi.R", envir = knitr::knit_global(~Bulls-project/Chicago_Bulls_u125511/funcs))
source(funcs/Bulls_multi_reg.R, local = TRUE)
source(~funcs/Bulls_multi_reg.R, local = TRUE)
source("funcs/Bulls_multi_reg.R", local = TRUE)
source("funcs/Bulls_multi_reg.R", local = TRUE)
library(knitr)
library(rmdformats)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(readr)
library(broom)
library(performance)
library(psych)
library(ggrepel)
library(rmdformats)
library(plotly)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
source("funcs/Bulls_multi_reg.R", local = TRUE)
pairs(formula = ~ PTS_per_MP + eFGp + TRB_MP + Tm_use_total + EFF + TrV, data = df_nonTOT_clean)
pairs(formula = ~ PTS_per_MP + eFGp + TRB_MP + Tm_use_total + EFF + TrV, data = df_nonTOT_clean)
lm_bb_hr <- lm(PTS_per_MP ~  eFGp + TRB_MP + Tm_use_total + EFF + TrV, data = df_nonTOT_clean)
knitr::kable(tidy(lm_bb_hr, conf.int = TRUE))
# as such if
#eFG = 0.55
#TRB_MP = .2
#Tm_use_total = 0.2
#EFF = 1500
#TrV = 600
#Predictive formula to PTS_per_MP
-0.382 + 0.699 * 0.55 + -0.0330 * 0.2 + 2.39 * 0.20 + 0.00000965 * 1500 + -0.00000803 * 600
## [1] 0.483507
DT:datatable(model_testing)
library(knitr)
library(rmdformats)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(readr)
library(broom)
library(performance)
library(psych)
library(ggrepel)
library(rmdformats)
library(plotly)
library(data.table)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
DT:datatable(model_testing)
install.packages('DT')
DT:datatable(model_testing)
library(DT)
DT:datatable(model_testing)
library(data.table)
DT:datatable(model_testing)
library(knitr)
library(rmdformats)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(readr)
library(broom)
library(performance)
library(psych)
library(ggrepel)
library(rmdformats)
library(plotly)
library(DT)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
DT:datatable(model_testing)
DT::datatable(model_testing)
DT::datatable(model_testing %>%
select(player_name, Tm, Age, Pos, salary, TrV, EFF, Tm_use_total,PTS_per_MP, TRB_MP, exp_PTS_per_MP) %>%
arrange(desc(exp_PTS_per_MP), salary))
DT::datatable(model_testing %>%
select(player_name, Tm, Age, Pos, salary, TrV, EFF, Tm_use_total,PTS_per_MP, TRB_MP, exp_PTS_per_MP) %>%
arrange(desc(exp_PTS_per_MP), salary))
gg2 <- ggplot(data = model_testing, aes(x = Tm_exp_Pts_per_MP, y = WinP_Tm, label = Tm, group = 1,
text = paste("Team: =", Tm,
"<br>Win%: ", round(WinP_Tm, digits = 4),
"<br>Actual Points: ", round(Tm_Pts_per_MP, digits = 4),"Pts/min",
"<br>Expected Points: ", round(Tm_exp_Pts_per_MP, digits = 4), "Pts/min")
)) +
geom_point(colour = "black", aes(Tm_Pts_per_MP, WinP_Tm)) +
geom_point(colour = "hotpink") +
geom_text(nudge_x = .00002, nudge_y = 1, cex = 3) +
labs(title = "Team Win Percentage vs Expected points/minute",
subtitle = "Teams with increased pts/min have a higher winning % ",
caption = "Data sourced from the NBA stats packages, see reference list",
colour = "Actual pts/min",
fill = "Expected pts/min") +
xlab("Pts per minute (Expected/Actual)") +
ylab("Win Percentage") +
theme_light()
ggplotly(gg2, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d",
"lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
gg2 <- ggplot(data = model_testing, aes(x = Tm_exp_Pts_per_MP, y = WinP_Tm, label = Tm, group = 1,
text = paste("Team: =", Tm,
"<br>Win%: ", round(WinP_Tm, digits = 4),
"<br>Actual Points: ", round(Tm_Pts_per_MP, digits = 4),"Pts/min",
"<br>Expected Points: ", round(Tm_exp_Pts_per_MP, digits = 4), "Pts/min")
)) +
geom_point(colour = "black", aes(Tm_Pts_per_MP, WinP_Tm)) +
geom_point(colour = "#1dcae0") +
geom_text(nudge_x = .00002, nudge_y = 1, cex = 3) +
labs(title = "Team Win Percentage vs Expected points/minute",
subtitle = "Teams with increased pts/min have a higher winning % ",
caption = "Data sourced from the NBA stats packages, see reference list",
colour = "Actual pts/min",
fill = "Expected pts/min") +
xlab("Pts per minute (Expected/Actual)") +
ylab("Win Percentage") +
theme_light()
ggplotly(gg2, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d",
"lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
gg2 +
guides(colour = guide_legend("Points per/min"),
fill = guide_legend("Points per/min"))
gg2 <- ggplot(data = model_testing, aes(x = Tm_exp_Pts_per_MP, y = WinP_Tm, label = Tm, group = 1,
text = paste("Team: =", Tm,
"<br>Win%: ", round(WinP_Tm, digits = 4),
"<br>Actual Points: ", round(Tm_Pts_per_MP, digits = 4),"Pts/min",
"<br>Expected Points: ", round(Tm_exp_Pts_per_MP, digits = 4), "Pts/min")
)) +
geom_point(colour = "black", aes(Tm_Pts_per_MP, WinP_Tm)) +
geom_point(colour = "#1dcae0") +
geom_text(nudge_x = .00002, nudge_y = 1, cex = 3) +
labs(title = "Team Win Percentage vs Expected points/minute",
subtitle = "Teams with increased pts/min have a higher winning % ",
caption = "Data sourced from the NBA stats packages, see reference list",
colour = "Actual pts/min",
fill = "Expected pts/min") +
xlab("Pts per minute (Expected/Actual)") +
ylab("Win Percentage") +
theme_light() +
guides(colour = guide_legend("Points per/min"),
fill = guide_legend("Points per/min"))
ggplotly(gg2, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d",
"lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
gg2 <- ggplot(data = model_testing, aes(x = Tm_exp_Pts_per_MP, y = WinP_Tm, label = Tm, group = 1,
text = paste("Team: =", Tm,
"<br>Win%: ", round(WinP_Tm, digits = 4),
"<br>Actual Points: ", round(Tm_Pts_per_MP, digits = 4),"Pts/min",
"<br>Expected Points: ", round(Tm_exp_Pts_per_MP, digits = 4), "Pts/min")
)) +
geom_point(colour = "black", aes(Tm_Pts_per_MP, WinP_Tm)) +
geom_point(colour = "#1dcae0") +
geom_text(nudge_x = .00002, nudge_y = 1, cex = 3) +
labs(title = "Team Win Percentage vs Expected points/minute",
subtitle = "Teams with increased pts/min have a higher winning % ",
caption = "Data sourced from the NBA stats packages, see reference list",
colour = "Actual pts/min",
fill = "Expected pts/min") +
xlab("Pts per minute (Expected/Actual)") +
ylab("Win Percentage") +
theme_light()
ggplotly(gg2, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d",
"lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
gg2 +
guides(colour = guide_legend("Points per/min"),
fill = guide_legend("Points per/min"))
gg <- ggplot(data = model_testing, aes(x = salary/1000000, y = exp_PTS_per_MP, color = Pos, label = Tm, group = 1,
text = paste("Name:", player_name,
"<br>Team: =", Tm,
"<br>Salary: ", salary,
"<br>Trade Value: ", TrV,
"<br>Efficiency: ", EFF,
"<br>Expected Points: ", round(Tm_exp_Pts_per_MP, digits = 4), "Pts/min",
"<br>Team Usage %:", Tm_use_total,
"<br>Total Rebounds/min:", TRB_MP))) +
labs(title = "Player Salary vs Expected points/minute",
subtitle = "Teams have increased winning % with an increased pts/min",
caption = "Data sourced from the fNBA stats package....",
colour = "Position") +
geom_point() +
xlab("Salary (Millions)") +
ylab("Expected Points/min")
ggplotly(gg, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d",
"lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
gg <- ggplot(data = model_testing, aes(x = salary/1000000, y = exp_PTS_per_MP, color = Pos, label = Tm, group = 1,
text = paste("Name:", player_name,
"<br>Team: =", Tm,
"<br>Salary: ", salary,
"<br>Trade Value: ", TrV,
"<br>Efficiency: ", EFF,
"<br>Expected Points: ", round(Tm_exp_Pts_per_MP, digits = 4), "Pts/min",
"<br>Team Usage %:", Tm_use_total,
"<br>Total Rebounds/min:", TRB_MP))) +
labs(title = "Player Salary vs Expected points/minute",
subtitle = "Teams have increased winning % with an increased pts/min",
caption = "Data sourced from the fNBA stats package....",
colour = "Position") +
geom_point() +
xlab("Salary (Millions)") +
ylab("Expected Points/min")
ggplotly(gg, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d",
"lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
gg2 <- ggplot(data = model_testing, aes(x = Tm_exp_Pts_per_MP, y = WinP_Tm, label = Tm, group = 1,
text = paste("Team: =", Tm,
"<br>Win%: ", round(WinP_Tm, digits = 4),
"<br>Actual Points: ", round(Tm_Pts_per_MP, digits = 4),"Pts/min",
"<br>Expected Points: ", round(Tm_exp_Pts_per_MP, digits = 4), "Pts/min")
)) +
geom_point(colour = "black", aes(Tm_Pts_per_MP, WinP_Tm)) +
geom_point(colour = "#1dcae0") +
geom_text(nudge_x = .00002, nudge_y = 1, cex = 3) +
labs(title = "Team Win Percentage vs Expected points/minute",
subtitle = "Teams with increased pts/min have a higher winning % ",
caption = "Data sourced from the NBA stats packages, see reference list",
colour = "Actual pts/min",
fill = "Expected pts/min") +
xlab("Pts per minute (Expected/Actual)") +
ylab("Win Percentage") +
theme_light()
ggplotly(gg2, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d",
"lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
gg2 <- ggplot(data = model_testing, aes(x = Tm_exp_Pts_per_MP, y = WinP_Tm, label = Tm, group = 1,
text = paste("Team: =", Tm,
"<br>Win%: ", round(WinP_Tm, digits = 4),
"<br>Actual Points: ", round(Tm_Pts_per_MP, digits = 4),"Pts/min",
"<br>Expected Points: ", round(Tm_exp_Pts_per_MP, digits = 4), "Pts/min")
)) +
geom_point(colour = "black", aes(Tm_Pts_per_MP, WinP_Tm)) +
geom_point(colour = "#1dcae0") +
geom_text(nudge_x = .00002, nudge_y = 1, cex = 3) +
labs(title = "Team Win Percentage vs Expected points/minute",
subtitle = "Teams with increased pts/min have a higher winning % ",
caption = "Data sourced from the NBA stats packages, see reference list",
colour = "Actual pts/min",
fill = "Expected pts/min") +
xlab("Pts per minute (Expected/Actual)") +
ylab("Win Percentage") +
theme_light()
ggplotly(gg2, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d",
"lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
source("funcs/Bulls_multi_reg.R", local = TRUE)
gg <- ggplot(data = model_testing, aes(x = salary/1000000, y = exp_PTS_per_MP, color = Pos, label = Tm, group = 1,
text = paste("Name:", player_name,
"<br>Team: =", Tm,
"<br>Salary: ", salary,
"<br>Trade Value: ", TrV,
"<br>Efficiency: ", EFF,
"<br>Expected Points: ", round(Tm_exp_Pts_per_MP, digits = 4), "Pts/min",
"<br>Team Usage %:", Tm_use_total,
"<br>Total Rebounds/min:", TRB_MP))) +
labs(title = "Player Salary vs Expected points/minute",
subtitle = "Teams have increased winning % with an increased pts/min",
caption = "Data sourced from the fNBA stats package....",
colour = "Position") +
geom_point() +
xlab("Salary (Millions)") +
ylab("Expected Points/min")
ggplotly(gg, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d",
"lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
gg <- ggplot(data = model_testing, aes(x = salary/1000000, y = exp_PTS_per_MP, color = Pos, label = Tm, group = 1,
text = paste("Name:", player_name,
"<br>Team: =", Tm,
"<br>Salary: ", salary,
"<br>Trade Value: ", TrV,
"<br>Efficiency: ", EFF,
"<br>Expected Points: ", round(Tm_exp_Pts_per_MP, digits = 4), "Pts/min",
"<br>Team Usage %:", Tm_use_total,
"<br>Total Rebounds/min:", TRB_MP))) +
labs(title = "Player Salary vs Expected points/minute",
subtitle = "Teams have increased winning % with an increased pts/min",
caption = "Data sourced from the fNBA stats package....",
colour = "Position") +
geom_point() +
xlab("Salary (Millions)") +
ylab("Expected Points/min")
ggplotly(gg, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d",
"lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
gg3 <- ggplot(data = model_testing, aes(x = salary/1000000, y = TrV, color = Pos, label = Tm, group = 1,
text = paste("Name:", player_name,
"<br>Team: =", Tm,
"<br>Salary: ", salary,
"<br>Trade Value: ", TrV,
"<br>Efficiency: ", EFF,
"<br>Expected Points: ", round(Tm_exp_Pts_per_MP, digits = 4), "Pts/min",
"<br>Team Usage %:", Tm_use_total,
"<br>Total Rebounds/min:", TRB_MP))) +
labs(title = "Player Trade Value vs Player Salary",
subtitle = "Teams have increased winning % with an increased pts/min",
caption = "Data sourced from the fNBA stats package....",
colour = "Position") +
geom_point() +
xlab("Salary (Millions)") +
ylab("Trade Value")
ggplotly(gg, tooltip = "text") %>%
config(displayModeBar = "static", displaylogo = FALSE,
modeBarButtonsToRemove = list("sendDataToCloud", "toImage", "autoScale2d", "resetScale2d",
"hoverClosestCartesian", "hoverCompareCartesian", "select2d",
"lasso2d", "zoomIn2d", "zoomOut2d", "toggleSpikelines"))
knitr::include_graphics(rep("images/Chicago_bulls_logo7G.jpeg"))
library(knitr)
library(rmdformats)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(readr)
library(broom)
library(performance)
library(psych)
library(ggrepel)
library(rmdformats)
library(plotly)
library(DT)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(knitr)
library(rmdformats)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(readr)
library(broom)
library(performance)
library(psych)
library(ggrepel)
library(rmdformats)
library(plotly)
library(DT)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
## player_stats_tidy
player_stats_tidy <- readr::read_csv("data/tidy_data/player_stats_tidy.csv")
## Teams Stas for Win percentage
df_Stats1_Tm_W <- readr::read_csv("data/tidy_data/df_team_Stats1.csv")
## 18-19 Stats 1
df_Stats2_Tm_W <- readr::read_csv("data/tidy_data/df_team_Stats2.csv")
## df_nonTOT_players
df_nonTOT_players_clean <- read_csv("data/tidy_data/df_nonTOT_clean.csv")
## player_stats_tidy
player_stats_tidy <- readr::read_csv("data/tidy_data/player_stats_tidy.csv")
## Teams Stas for Win percentage
df_Stats1_Tm_W <- readr::read_csv("data/tidy_data/df_team_Stats1.csv")
## 18-19 Stats 1
df_Stats2_Tm_W <- readr::read_csv("data/tidy_data/df_team_Stats2.csv")
## df_nonTOT_players
df_nonTOT_players_clean <- read_csv("data/tidy_data/df_nonTOT_clean.csv")
knitr::include_graphics(rep("images/Chicago_bulls_logo7G.jpeg"))
View(player_stats_tidy)
View(player_stats_tidy)
View(df_nonTOT_players_clean)
View(df_nonTOT_players_clean)
source("funcs/Bulls_multi_reg.R", local = TRUE)
