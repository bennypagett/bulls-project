## Datathon_2_Activity-10

## Kicks, Marks, Handballs, Tackles to Goals

library(tidyverse)
library(ggplot2)
library(readr)
library(dplyr)
library(broom)
library(performance)
library(psych)

df <- read_csv("data/1991-2020_afl_team_data_tidy.csv")
View(df)

## NA
sum(is.na(df))
which(is.na(df), arr.ind = TRUE)

## NA
sum(is.na(df))
which(is.na(df), arr.ind = TRUE)
filter(df, is.na(df$Round))

##replace NA with "Final"
df <- replace_na(df, list(Round = "Final"))
sum(is.na(df))

## Do you need to filter anything?
library(dplyr)    
new_df <- df %>%
  filter(df$Marks.Inside.50 >= 1)

#exploratory
str(new_df)
head(new_df, 20)
tail(new_df, 20)

## filter data
## df2000 <- df %>%
## filter(Season, ...)


#data transformation needed?

## Step 5 exploratory data analysis
## Season v Goals
ggplot(data = new_df, aes(x = Season, y = Goals)) +
  geom_point() +
  geom_smooth(method = "lm")

## Kicks v Goals

ggplot(data = new_df, aes(x = Kicks, y = Goals)) +
  geom_point() +
  geom_smooth(method = "lm")

## Handballs v Goals

ggplot(data = new_df, aes(x = Handballs, y = Goals)) +
  geom_point() +
  geom_smooth(method = "lm")

## Marks v Goals

ggplot(data = new_df, aes(x = Marks, y = Goals)) +
  geom_point() +
  geom_smooth(method = "lm")

## Tackles v Goals

ggplot(data = new_df, aes(x = Tackles, y = Goals)) +
  geom_point() +
  geom_smooth(method = "lm")

## Inside.50s v Goals

ggplot(data = new_df, aes(x = Inside.50s, y = Goals)) +
  geom_point() +
  geom_smooth(method = "lm")

## Marks.Inside.50 v Goals

ggplot(data = new_df, aes(x = Marks.Inside.50, y = Goals)) +
  geom_point() +
  geom_smooth(method = "lm")

## visualisation of home/away team and goals

ggplot(data = new_df, aes(x = Inside.50s, y = Goals, colour = Home.team)) +
  geom_point() +
  geom_smooth(method = "lm")

## Mutate new factor variable Home_result. Using match_outcome. 
new_df <- new_df %>%
  mutate(Home_result = "")
  new_df$Home_result <- as.factor(new_df$match_outcome)

list(new_df$Home_result)  
summary(new_df$Home_result)  

view(new_df)
    
# Goals Inside.50s vs Goals - colour = Home_result
ggplot(data = new_df, aes(x = Inside.50s, y = Goals, colour = Home_result)) +
  geom_point() +
  geom_smooth(method = "lm")

## Comparison of goals at Home separated by Home_result
ggplot(data = new_df, aes(x = Home_result, y = Goals)) +
  geom_boxplot(aes(fill = Home_result))

## Season v Goals
ggplot(data = new_df, aes(x = Season, y = Goals, colour = Home_result)) +
  geom_point() +
  geom_smooth(method = "lm")

## Kicks v Goals

ggplot(data = new_df, aes(x = Kicks, y = Goals, colour = Home_result)) +
  geom_point() +
  geom_smooth(method = "lm")

## Handballs v Goals

ggplot(data = new_df, aes(x = Handballs, y = Goals, colour = Home_result)) +
  geom_point() +
  geom_smooth(method = "lm")

## Marks v Goals

ggplot(data = new_df, aes(x = Marks, y = Goals, colour = Home_result)) +
  geom_point() +
  geom_smooth(method = "lm")

## Tackles v Goals

ggplot(data = new_df, aes(x = Tackles, y = Goals, colour = Home_result)) +
  geom_point() +
  geom_smooth(method = "lm")

## Inside.50s v Goals

ggplot(data = new_df, aes(x = Inside.50s, y = Goals, colour = Home_result)) +
  geom_point() +
  geom_smooth(method = "lm")
# the more inside.50s a team is gaining = more goals

## Marks.Inside.50 v Goals

ggplot(data = new_df, aes(x = Marks.Inside.50, y = Goals, colour = Home_result)) +
  geom_point() +
  geom_smooth(method = "lm")

## Pairs analysis
pairs(formula = ~ Goals + Marks.Inside.50 + Inside.50s + Tackles + Kicks + Handballs + Marks, data = new_df)
# ?? pairs relationship again

## Multiple linear regressions
library(broom)
fit <- lm(Goals ~ Marks.Inside.50 + Inside.50s + Tackles + Kicks + Handballs + Marks + Home_result, data = new_df)
tidy(fit, conf.int = TRUE)

#term            estimate std.error statistic   p.value conf.low conf.high
#<chr>              <dbl>     <dbl>     <dbl>     <dbl>    <dbl>     <dbl>
#  1 (Intercept)      7.29      1.35         5.40 7.06e-  8  4.64      9.94   
#2 Marks.Inside.50  0.367     0.0140      26.2  6.18e-140  0.339     0.394  
#3 Inside.50s       0.231     0.00926     25.0  4.61e-128  0.213     0.249  
#4 Tackles         -0.0140    0.00292     -4.80 1.62e-  6 -0.0197   -0.00829
#5 Kicks           -0.0370    0.00341    -10.9  4.01e- 27 -0.0437   -0.0303 
#6 Handballs        0.00806   0.00155      5.18 2.28e-  7  0.00501   0.0111 
#7 Marks           -0.00569   0.00341     -1.67 9.55e-  2 -0.0124    0.00100
#8 Home_resultLoss  1.70      0.760        2.24 2.53e-  2  0.211     3.19   
#9 Home_resultWin   1.70      0.757        2.24 2.50e-  2  0.214     3.18   

summary(fit)

# Call:
#lm(formula = Goals ~ Marks.Inside.50 + Inside.50s + Tackles + 
 #    Kicks + Handballs + Marks + Home_result, data = new_df)

#Residuals:
#  Min       1Q   Median       3Q      Max 
#-15.5223  -3.0137  -0.1134   3.0052  21.0381 

#Coefficients:
                # Estimate Std. Error t value Pr(>|t|)    
#(Intercept)      7.292190   1.350501   5.400 7.06e-08 ***
#  Marks.Inside.50  0.366711   0.013997  26.200  < 2e-16 ***
#  Inside.50s       0.231017   0.009255  24.961  < 2e-16 ***
#  Tackles         -0.014015   0.002918  -4.802 1.62e-06 ***
#  Kicks           -0.036996   0.003405 -10.864  < 2e-16 ***
#  Handballs        0.008057   0.001554   5.184 2.28e-07 ***
#  Marks           -0.005691   0.003413  -1.667   0.0955 .  
#Home_resultLoss  1.699897   0.759645   2.238   0.0253 *  
#  Home_resultWin   1.697846   0.756985   2.243   0.0250 *  
#  ---
 # Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

#Residual standard error: 4.437 on 4062 degrees of freedom
#Multiple R-squared:  0.3881,	Adjusted R-squared:  0.3868 
#F-statistic:   322 on 8 and 4062 DF,  p-value: < 2.2e-16

# intercept coefficient = when all continuous explanatory variables are equal to 0, and when Home_result is a WIn, 
# the estimated goals per game is 
# slope coef for Marks.Inside.50 = when Marks.Inside.50 is increased by 1, Goals increases by 0.367 , when all other variables remain fixed
# slope coef for Inside.50s = when Inside.50s is increased by 1, Goals increases by 0.231, when all other variables remain fixed
# slope coef for Kicks = when Kicks is increased by 1, Goals decreases by -0.003, when all other variables remain fixed
# HOme_result Win have a Goals that are 1.697 higher on average, than Home_result Loss, when all other variables remain fixed. 

## Independence
# looking for statistic close to 2

car::durbinWatsonTest(fit)
## lag Autocorrelation D-W Statistic p-value
#   1      0.04047019      1.918885   0.008
 # Alternative hypothesis: rho != 0

## Outliers
std_res <- rstandard(fit)
points <- 1:length(std_res)

ggplot(data = NULL, aes(x = points, y = std_res)) +
  geom_point() +
  ylim(c(-4, 4)) +
  geom_hline(yintercept = c(-3, 3), colour = "red", linetype = "dashed")

## assess outliers outside of 3

res_labels <- if_else(abs(std_res) >= 2.8, paste(points), "")

ggplot(data = NULL, aes(x = points, y = std_res, label = res_labels)) +
  geom_point() +
  geom_text(nudge_x = 2) +
  ylim(c(-4, 4)) +
  geom_hline(yintercept = c(-3, 3), colour = "red", linetype = "dashed")


## Leverage points
hats <- hatvalues(fit)

ggplot(data = NULL, aes(x = points, y = hats)) +
  geom_point()

## no values >1. However, we might investigate the values >0.04

hat_labels <- if_else(hats >= 0.035, paste(points), "")

ggplot(data = NULL, aes(x = points, y = hats)) +
  geom_point() +
  geom_text(aes(label = hat_labels), nudge_y = 0.005)

## inluential points

cook <- cooks.distance(fit)

ggplot(data = NULL, aes(x = points, y = cook)) +
  geom_point()


## take a further look at values >0.007

cook_labels <- if_else(cook >= 0.007, paste(points), "")

ggplot(data = NULL, aes(x = points, y = cook)) +
  geom_point() +
  geom_text(aes(label = cook_labels), nudge_x = 7)

## remove outlier points and re-run regression model

# new df with outliers removed

outliers <- c(207, 828, 1705, 1711, 3702, 3863)
filtered_df <- new_df %>%
  filter(!Round %in% outliers) # filter if round is not(!) %in% outliers

# re-run linear regression
fit2 <- lm(Goals ~ Marks.Inside.50 + Inside.50s + Tackles + Kicks + Handballs + Marks + Home_result, data = filtered_df)
tidy(fit2, conf.int = TRUE)

# term             estimate std.error statistic   p.value conf.low conf.high
#<chr>              <dbl>     <dbl>     <dbl>     <dbl>    <dbl>     <dbl>
#  1 (Intercept)      7.29      1.35         5.40 7.06e-  8  4.64      9.94   
#2 Marks.Inside.50  0.367     0.0140      26.2  6.18e-140  0.339     0.394  
#3 Inside.50s       0.231     0.00926     25.0  4.61e-128  0.213     0.249  
#4 Tackles         -0.0140    0.00292     -4.80 1.62e-  6 -0.0197   -0.00829
#5 Kicks           -0.0370    0.00341    -10.9  4.01e- 27 -0.0437   -0.0303 
#6 Handballs        0.00806   0.00155      5.18 2.28e-  7  0.00501   0.0111 
#7 Marks           -0.00569   0.00341     -1.67 9.55e-  2 -0.0124    0.00100
#8 Home_resultLoss  1.70      0.760        2.24 2.53e-  2  0.211     3.19   
#9 Home_resultWin   1.70      0.757        2.24 2.50e-  2  0.214     3.18  

summary(fit2)

#Call:
 # lm(formula = Goals ~ Marks.Inside.50 + Inside.50s + Tackles + 
 #      Kicks + Handballs + Marks + Home_result, data = filtered_df)

#Residuals:
#  Min       1Q   Median       3Q      Max 
#-15.5223  -3.0137  -0.1134   3.0052  21.0381 

#Coefficients:
#  #             Estimate Std. Error t value Pr(>|t|)    
#(Intercept)      7.292190   1.350501   5.400 7.06e-08 ***
#  Marks.Inside.50  0.366711   0.013997  26.200  < 2e-16 ***
 # Inside.50s       0.231017   0.009255  24.961  < 2e-16 ***
#  Tackles         -0.014015   0.002918  -4.802 1.62e-06 ***
#  Kicks           -0.036996   0.003405 -10.864  < 2e-16 ***
#  Handballs        0.008057   0.001554   5.184 2.28e-07 ***
#  Marks           -0.005691   0.003413  -1.667   0.0955 .  
#Home_resultLoss  1.699897   0.759645   2.238   0.0253 *  
#  Home_resultWin   1.697846   0.756985   2.243   0.0250 *  
#  ---
#  Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

#Residual standard error: 4.437 on 4062 degrees of freedom
#Multiple R-squared:  0.3881,	Adjusted R-squared:  0.3868 
#F-statistic:   322 on 8 and 4062 DF,  p-value: < 2.2e-16


## Homoscedasicity
res <- residuals(fit)
fitted <- predict(fit)

ggplot(data = NULL, aes(x = fitted, y = res)) +
  geom_point(colour = "dodgerblue") +
  geom_hline(yintercept = 0, colour = "red", linetype = "dashed")

# ?heteroscdesticity - not found in this sample. .e.g food expense and income

## step 12 - Normality

ggplot(data = NULL, aes(x = res)) +
  geom_histogram(colour = "black", fill = "dodgerblue", binwidth = 4)

# look pretty normal distribution

ggplot(data = NULL, aes(sample = res)) +
  stat_qq() + stat_qq_line()

# short tails. looks ok.

## step 14 - Linearity

car::vif(fit)

##                   GVIF Df GVIF^(1/(2*Df))
#Marks.Inside.50 1.543541  1        1.242393
##Inside.50s      1.502482  1        1.225758
#Tackles         2.004624  1        1.415847
#Kicks           2.293549  1        1.514447
#Handballs       1.842224  1        1.357286
#Marks           2.416447  1        1.554493
#Home_result     1.006677  2        1.001665


# Linearity
car::avPlots(fit)

# mostly linear plots. Greatest effect is Marks.Inside.50 and Inside.50s

# Predictive equation

# when a team has 30 Marks.Inside.50, 25 Inside.50s, 50 Tackles, 50 Kicks, 35 Handballs, 40 Marks, and a Win = 
7.29 + 30 * 0.367 + 0.231 * 25 + -0.014 * 50 + -0.0370 * 50 + 0.008 * 35 + -0.005 * 40 + 3 * 1.70
##  26.705 Goals

## Interpretation

## assumptions of multi-variable system, likelihood of all factors playing out. As well as contribution of behind and penalties?





